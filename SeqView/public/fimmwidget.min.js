var FimmWidgets={};FimmWidgets.shared={};FimmWidgets.util={};(function(fw){fw.util.isArray=function(){if(Array.isArray&&typeof Array.isArray==="function"){return Array.isArray}else{return function(o){if(Object.prototype.toString.call(o)==="[object Array]"){return true}return false}}}();fw.util.create=function(){if(!Object.create||typeof Object.create!=="function"){return function(o){if(arguments.length>1){throw new Error("Object.create implementation only accepts the first parameter.")}function F(){}F.prototype=o;return new F}}else{return Object.create}}();fw.util.properties=function(){var hasOwnProperty=Object.prototype.hasOwnProperty,hasDontEnumBug=!{toString:null}.propertyIsEnumerable("toString"),dontEnums=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],dontEnumsLength=dontEnums.length;return function(o){var result=[];if(typeof o!="object"&&typeof o!="function"||o===null){return result}for(var name in o){if(hasOwnProperty.call(o,name))result.push(name)}if(hasDontEnumBug){for(var i=0;i<dontEnumsLength;i++){if(hasOwnProperty.call(o,dontEnums[i]))result.push(dontEnums[i])}}return result}}();function loadDynamicFile(fileURL,props,params){var onloadCallback=function(){setTimeout(function(){doLoading(params)},10)};var elem=document.createElement(props.elem);delete props.elem;for(var p in props){if(props.hasOwnProperty(p)){elem[p]=props[p]}}if(typeof elem.addEventListener!=="undefined"){elem.addEventListener("load",onloadCallback,false)}else{elem.attachEvent("onreadystatechange",function(){if(elem.readyState=="loaded"){onloadCallback()}})}document.getElementsByTagName("head")[0].appendChild(elem)}function doLoading(params){var files=params.files;var getProps=function(f){var lastDot=f.lastIndexOf(".")+1;var sfx=f.substring(lastDot);var props={};if(sfx==="js"){props.elem="script";props.type="text/javascript";props.src=f}else if(sfx==="css"){props.elem="link";props.type="text/css";props.rel="stylesheet";props.href=f}return props};var file;if(files.length>0){file=files.pop();loadDynamicFile(file,getProps(file),params)}else{if(typeof params.onready==="function"){if(document.readyState==="complete"){params.onready.call(null,params.config)}else{Ext.onReady(function(){params.onready.apply(null,params.config)},null,true)}}}}function loadDynamically(){var args=arguments;var isArray=fw.util.isArray;var restArgs=[];var defaultFiles=["extjs/css/ext-all.css","extjs/js/ext-all.js","extjs/css/shared/example.css"];var files=defaultFiles;var conf={};var params;if(args.length>0){if(isArray(args[0])){files=args[0]}else{conf=args[0]}}if(args.length>1){if(isArray(args[0])){files=args[0]}if(typeof args[1]==="object"&&isArray(args[1])===false){conf=args[1]}}params={onready:launch,config:conf};if(typeof files==="string"){files=[files]}if(isArray(files)===true){files.reverse();params.files=files;doLoading(params)}}fw.loadDynamically=loadDynamically;function defaultConfig(config){var defaultConfigValues={containerDivId:"mainarea",searchFormDivId:"search_form",searchFormId:Ext.id(),variantTitleDivId:Ext.id(),variantTitleDivClass:"variant_title",variantGridDivId:"variant_grid",variantGridId:Ext.id(),seqview:{},geneSearchComboboxId:Ext.id(),geneSearchButtonId:Ext.id("gene-search")};var props=fw.util.properties(defaultConfigValues);var idx=0;var prop;while(idx<props.length){prop=props[idx];if(config.hasOwnProperty(prop)===false){config[prop]=defaultConfigValues[prop]}idx+=1}return config}function createDivs(conf){var ids=new Array(conf.containerDivId,conf.searchFormDivId,conf.variantGridDivId);var id=conf.containerDivId;var container=Ext.get(id);var div;if(container===null){container=Ext.getBody().createChild({tag:"div",id:id})}id=conf.searchFormDivId;div=Ext.get(id);if(div===null||container.contains(div)===true){if(div!==null){div.appendTo(container)}else{container.createChild({tag:"div",id:id})}}container.createChild({tag:"div",id:conf.variantTitleDivId,cls:conf.variantTitleDivClass});id=conf.variantGridDivId;div=Ext.get(id);if(div===null||container.contains(div)===true){if(div!==null){div.appendTo(container)}else{container.createChild({tag:"div",id:id})}}}function doSearch(appConfig){var geneName=Ext.getCmp(appConfig.geneSearchComboboxId).getValue();var grid=Ext.get(appConfig.variantGridId);var main=Ext.get(appConfig.containerDivId);var renderer=Ext.create("ValueRenderer");var svbtnId=Ext.id();var ensemblId=Ext.id();var toolbarId=Ext.id();var store,win;if(typeof geneName!=="string"){Ext.MessageBox.alert("No input given","Please give a gene name.");return}if(geneName.length>2){if(grid!==null){grid.destroy()}fw.shared.geneName=geneName;(function(name){var div=Ext.get(appConfig.variantTitleDivId);if(div.child("h2")!==null){div.child("h2").remove()}div.createChild({tag:"h2",html:name})})(geneName);store=Ext.create("Ext.data.Store",{pageSize:10,model:"Variant",autoLoad:true,remoteSort:true,proxy:{type:"ajax",url:"/variants",reader:{root:"variants",totalProperty:"totalCount"},extraParams:{gene:geneName},simpleSortMode:false}});grid=Ext.create("Ext.grid.Panel",{width:700,height:450,title:"Browse Variants",id:appConfig.variantGridId,renderTo:appConfig.variantGridDivId,store:store,selModel:{allowDeselect:true,mode:"SINGLE"},loadMask:true,listeners:{selectionchange:{fn:function(rowModel,selected,eOpts){var btn=Ext.getCmp(svbtnId);var ens=Ext.getCmp(ensemblId);var toolbar=Ext.getCmp(toolbarId);var sel={};var variant;if(selected.length>0){variant=selected[0];sel.variant=variant;sel.symbol=variant.data.genes[0].accession;sel.uri=variant.get("uri");sel.id=variant.get("id");fw.shared.selected=sel;toolbar.enable();btn.enable();ens.enable()}else{fw.shared.selected=null;toolbar.disable();btn.disable();ens.disable()}}}},viewConfig:{id:"gv",trackOver:false,stripeRows:false},columns:[{text:"Name",dataIndex:"name",flex:1,renderer:renderer.renderName,sortable:true},{text:"Accession",dataIndex:"ref_seq",flex:1,renderer:renderer.renderAccessionNumbers,sortable:false},{text:"Variant Gene",dataIndex:"genes",flex:1,renderer:renderer.renderVariantGenes,sortable:false},{text:"Frequencies",dataIndex:"frequencies",flex:1,renderer:renderer.renderFrequencies,sortable:false}],tbar:[{text:"Display",id:toolbarId,disabled:true,menu:{xtype:"menu",items:[{xtype:"menuitem",id:svbtnId,text:"SeqView",disabled:true,listeners:{click:function(){var selected=fw.shared.selected;Ext.Ajax.request({url:"/seqviewer",method:"GET",params:{id:selected.id,symbol:selected.symbol},success:function(res){var json=Ext.JSON.decode(res.responseText);var variant=json.variant;var hgnc=json.hgnc;var win=fw.shared.win;var conf=fw.util.create(fw.shared.seqviewConfig);var start=Number(variant.locations[0].start);var end=Number(variant.locations[0].end);var marker=selected.variant.data.name.string;var color="00ff00";var tries=10;function showsv(w){if(tries==0){console.log('After 10 attempts, seqview window still does not have "show_sequence_viewer" method.');return}tries-=1;if(w.document.readyState==="complete"&&w["show_sequence_viewer"]!==undefined&&typeof w["show_sequence_viewer"]==="function"){w.show_sequence_viewer(conf)}else{setTimeout(function(){showsv(w)},500)}}conf.start=start;conf.end=end;conf.id=variant.locations[0].ref_seq.accession;if(conf.end-conf.start<100){(function(c){var sep=Number(c.end-c.start).toFixed();var rem=100-sep;rem=Number(rem/2).toFixed();rem=parseInt(rem,10);if(Number(c.start-rem)>0){c.start=Number(c.start-rem)}c.end=Number(c.end+rem)})(conf)}conf.mk=Ext.String.format("{0}:{1}|{2}|{3}",start,end,marker,color);if(!win||win.closed===true){win=window.open("http://localhost:8080/index.html","_blank");fw.shared.win=win}showsv(win)}})}}},{xtype:"menuitem",text:"Ensembl",id:ensemblId,disabled:true,listeners:{click:function(){var sel=fw.shared.selected;window.open(sel.uri,"_blank")}}}]}}],bbar:Ext.create("Ext.PagingToolbar",{store:store,displayInfo:true,displayMsg:"Displaying variants {0} - {1} of {2}",emptyMsg:"No variants to display"})})}}function launch(appConfig){appConfig=defaultConfig(appConfig);createDivs(appConfig);fw.shared.seqviewConfig=appConfig.seqview;Ext.Loader.setConfig({enabled:true});Ext.Loader.setPath("Ext.ux","../ux");Ext.require(["Ext.ModelManager","Ext.data.*","Ext.form.*","Ext.grid.*","Ext.layout.container.Column","Ext.panel.*","Ext.tab.Panel","Ext.tip.QuickTipManager","Ext.toolbar.Paging","Ext.util.*","Ext.ux.PreviewPlugin"]);Ext.define("ValueRenderer",function(base){return{renderVariantGenes:function(value,p,record){if(value.length===0){return"No variant genes"}if(value.length===1){var elem=value[0];return Ext.String.format("{0}",elem["accession"])}return Ext.String.format("<b>{0}</b>","Details")},renderName:function(value,p,record){var name=Ext.htmlDecode(value["string"]);var link=name;return link},renderFrequencies:function(value,p,record){if(!Ext.isArray(value)){return"no freqs"}return base.renderMultipleValues({record:record,title:"Frequencies",store:new Ext.data.ArrayStore({fields:[{name:"samples"},{name:"type"},{name:"populations"},{name:"freq",type:"float"}],data:Ext.Array.map(value,function(elem){return[elem["samples"],elem["type"],elem["populations"],elem["freq"]]})}),columns:[new Ext.grid.RowNumberer,{text:"Samples",width:50,sortable:true,dataIndex:"samples"},{text:"Type",width:70,sortable:true,dataIndex:"type"},{text:"Populations",width:200,sortable:true,renderer:function(p){return Ext.String.format("{0} ({1})",p.term,p.type)},dataIndex:"populations"},{text:"Freq",width:70,sortable:true,dataIndex:"freq"}]})},renderAccessionNumbers:function(value,p,record){return value["accession"]}}}({renderMultipleValues:function(params){var id=Ext.id();var winId=Ext.id();var html=Ext.String.format('<div id="{0}"></div>',id);var geneName=params.record.data.name.string;var win=Ext.create("widget.window",{id:winId,title:Ext.String.format('Frequencies ("{0}")',geneName),width:500,height:300,layout:"fit",items:[{border:false,xtype:"grid",store:params.store,columns:params.columns}]});Ext.defer(function(){Ext.create("Ext.Button",{text:"Details",renderTo:id,handler:function(){win.show()}})},50);return html}}));Ext.define("GeneName",{extend:"Ext.data.Model",fields:[{type:"string",name:"name"}]});Ext.define("Variant",{extend:"Ext.data.Model",fields:["genes","ref_seq","name","panels","frequencies","aliases","locations","sharing_policy","id","uri"],idProperty:"id"});Ext.define("GeneNameStore",{extend:"Ext.data.Store",model:"GeneName",remoteFilter:true,proxy:{type:"ajax",url:"/genes",reader:"json"},autoLoad:false});Ext.define("GeneComboBox",{extend:"Ext.form.field.ComboBox",alias:["widget.gene-combobox"],constructor:function(cnfg){this.callParent([cnfg]);this.initConfig(cnfg);this.store=Ext.create("GeneNameStore")},onRender:function(){this.callParent(arguments)}});Ext.define("GeneSearchComponent",{extend:"Ext.panel.Panel",alias:"widget.gene-search-component",collapsible:true,frame:true,title:"Search",bodyPadding:"15 15 15 15",width:350,layout:{type:"vbox",align:"left"},items:[{xtype:"gene-combobox",id:appConfig.geneSearchComboboxId,fieldLabel:"Gene Name/symbol",value:"AGL (amylo-alpha-1, 6-glucosidase, 4-alpha-glucanotransferase)",displayField:"name",hideTrigger:true,multiSelect:false,width:320,labelWidth:130,queryMode:"remote",enableKeyEvents:true,listeners:{keypress:{fn:function(combo,evnt){if(evnt.getKey()===13){doSearch(appConfig)}}}},minChars:3,typeAhead:true,typeAheadDelay:1e3},{xtype:"button",id:appConfig.geneSearchButtonId,text:"Search",handler:function(){doSearch(appConfig)}}]});Ext.application({name:"FW",launch:function(){Ext.widget("gene-search-component",{id:appConfig.searchFormId,renderTo:appConfig.searchFormDivId})}})}fw.launch=launch})(FimmWidgets);